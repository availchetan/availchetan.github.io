{"uid":"a4759e4611bc55b1","name":"test_login","fullName":"test_login#test_login","historyId":"7a6d5049f9f16ad82653dde78c1774b6","time":{"start":1748932725240,"stop":1748932755618,"duration":30378},"status":"broken","statusMessage":"playwright._impl._api_types.Error: Execution context was destroyed, most likely because of a navigation\n=========================== logs ===========================\n  checking visibility of locator(\"html#facebook\")\n============================================================","statusTrace":"@pytest.mark.ui\n    @pytest.mark.regression\n    def test_login():\n        with sync_playwright() as p:\n            # Launch the browser in headless mode based on the environment variable\n            browser = p.chromium.launch(headless=os.getenv(\"HEADLESS\", \"true\").lower() == \"true\")\n            page = browser.new_page()\n    \n            # Initialize the LoginPage object\n            login_page = LoginPage(page)\n    \n            # Retrieve the login URL, username, and password from environment variables\n            login_url = os.getenv(\"LOGIN_URL\")\n            username = os.getenv(\"LOGIN_USERNAME\", \"testuser\")\n            password = os.getenv(\"LOGIN_PASSWORD\", \"securepassword\")\n    \n            # Validate that login_url is set\n            assert login_url is not None, \"LOGIN_URL is not set in environment variables.\"\n    \n            # Navigate to the login page and perform the login\n            login_page.navigate_to_login_page(login_url)\n            login_page.login(username, password)\n    \n            # Assert that login was successful\n>           assert login_page.is_login_successful(), \"Login failed, user is not logged in successfully.\"\n\ntest_login.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/app/tests/ui/pages/login_page.py:19: in is_login_successful\n    return self.page.locator(\"html#facebook\").is_visible()\n/venv/lib/python3.9/site-packages/playwright/sync_api/_generated.py:17209: in is_visible\n    self._sync(self._impl_obj.is_visible(timeout=timeout))\n/venv/lib/python3.9/site-packages/playwright/_impl/_locator.py:492: in is_visible\n    return await self._frame.is_visible(\n/venv/lib/python3.9/site-packages/playwright/_impl/_frame.py:353: in is_visible\n    return await self._channel.send(\"isVisible\", locals_to_params(locals()))\n/venv/lib/python3.9/site-packages/playwright/_impl/_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n/venv/lib/python3.9/site-packages/playwright/_impl/_connection.py:461: in wrap_api_call\n    return await cb()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x7fa53d0eacd0>\nmethod = 'isVisible', params = {'selector': 'html#facebook', 'strict': True}\nreturn_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.Error: Execution context was destroyed, most likely because of a navigation\nE       =========================== logs ===========================\nE         checking visibility of locator(\"html#facebook\")\nE       ============================================================\n\n/venv/lib/python3.9/site-packages/playwright/_impl/_connection.py:96: Error","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"tag","value":"regression"},{"name":"tag","value":"ui"},{"name":"suite","value":"test_login"},{"name":"host","value":"571ffc3c1a9d"},{"name":"thread","value":"17-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["ui","regression"]},"source":"a4759e4611bc55b1.json","parameterValues":[]}